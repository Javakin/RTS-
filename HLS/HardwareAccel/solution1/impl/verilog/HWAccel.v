// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="HWAccel,hls_ip_2018_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=8,HLS_SYN_FF=726,HLS_SYN_LUT=410}" *)

module HWAccel (
        ap_clk,
        ap_rst_n,
        s_axi_AXI_L_AWVALID,
        s_axi_AXI_L_AWREADY,
        s_axi_AXI_L_AWADDR,
        s_axi_AXI_L_WVALID,
        s_axi_AXI_L_WREADY,
        s_axi_AXI_L_WDATA,
        s_axi_AXI_L_WSTRB,
        s_axi_AXI_L_ARVALID,
        s_axi_AXI_L_ARREADY,
        s_axi_AXI_L_ARADDR,
        s_axi_AXI_L_RVALID,
        s_axi_AXI_L_RREADY,
        s_axi_AXI_L_RDATA,
        s_axi_AXI_L_RRESP,
        s_axi_AXI_L_BVALID,
        s_axi_AXI_L_BREADY,
        s_axi_AXI_L_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_AXI_L_DATA_WIDTH = 32;
parameter    C_S_AXI_AXI_L_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXI_L_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXI_L_AWVALID;
output   s_axi_AXI_L_AWREADY;
input  [C_S_AXI_AXI_L_ADDR_WIDTH - 1:0] s_axi_AXI_L_AWADDR;
input   s_axi_AXI_L_WVALID;
output   s_axi_AXI_L_WREADY;
input  [C_S_AXI_AXI_L_DATA_WIDTH - 1:0] s_axi_AXI_L_WDATA;
input  [C_S_AXI_AXI_L_WSTRB_WIDTH - 1:0] s_axi_AXI_L_WSTRB;
input   s_axi_AXI_L_ARVALID;
output   s_axi_AXI_L_ARREADY;
input  [C_S_AXI_AXI_L_ADDR_WIDTH - 1:0] s_axi_AXI_L_ARADDR;
output   s_axi_AXI_L_RVALID;
input   s_axi_AXI_L_RREADY;
output  [C_S_AXI_AXI_L_DATA_WIDTH - 1:0] s_axi_AXI_L_RDATA;
output  [1:0] s_axi_AXI_L_RRESP;
output   s_axi_AXI_L_BVALID;
input   s_axi_AXI_L_BREADY;
output  [1:0] s_axi_AXI_L_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [1:0] s_screen_val_address0;
reg    s_screen_val_ce0;
reg    s_screen_val_we0;
reg   [31:0] s_screen_val_d0;
wire   [31:0] s_screen_val_q0;
reg   [1:0] s_mask_val_address0;
reg    s_mask_val_ce0;
wire   [31:0] s_mask_val_q0;
reg  signed [31:0] reg_118;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg  signed [31:0] reg_122;
reg  signed [31:0] reg_126;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
reg  signed [31:0] reg_130;
wire   [31:0] grp_fu_134_p2;
reg   [31:0] reg_146;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] reg_151;
wire    ap_CS_fsm_state7;
wire   [1:0] s_screen_val_addr_reg_156;
wire   [1:0] s_screen_val_addr_1_reg_166;
wire   [1:0] s_screen_val_addr_2_reg_176;
wire   [1:0] s_screen_val_addr_3_reg_186;
wire    ap_CS_fsm_state8;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

HWAccel_AXI_L_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXI_L_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXI_L_DATA_WIDTH ))
HWAccel_AXI_L_s_axi_U(
    .AWVALID(s_axi_AXI_L_AWVALID),
    .AWREADY(s_axi_AXI_L_AWREADY),
    .AWADDR(s_axi_AXI_L_AWADDR),
    .WVALID(s_axi_AXI_L_WVALID),
    .WREADY(s_axi_AXI_L_WREADY),
    .WDATA(s_axi_AXI_L_WDATA),
    .WSTRB(s_axi_AXI_L_WSTRB),
    .ARVALID(s_axi_AXI_L_ARVALID),
    .ARREADY(s_axi_AXI_L_ARREADY),
    .ARADDR(s_axi_AXI_L_ARADDR),
    .RVALID(s_axi_AXI_L_RVALID),
    .RREADY(s_axi_AXI_L_RREADY),
    .RDATA(s_axi_AXI_L_RDATA),
    .RRESP(s_axi_AXI_L_RRESP),
    .BVALID(s_axi_AXI_L_BVALID),
    .BREADY(s_axi_AXI_L_BREADY),
    .BRESP(s_axi_AXI_L_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .s_screen_val_address0(s_screen_val_address0),
    .s_screen_val_ce0(s_screen_val_ce0),
    .s_screen_val_we0(s_screen_val_we0),
    .s_screen_val_d0(s_screen_val_d0),
    .s_screen_val_q0(s_screen_val_q0),
    .s_mask_val_address0(s_mask_val_address0),
    .s_mask_val_ce0(s_mask_val_ce0),
    .s_mask_val_q0(s_mask_val_q0)
);

HWAccel_mul_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
HWAccel_mul_32s_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_118),
    .din1(reg_122),
    .ce(1'b1),
    .dout(grp_fu_134_p2)
);

HWAccel_mul_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
HWAccel_mul_32s_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_126),
    .din1(reg_130),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_118 <= s_screen_val_q0;
        reg_122 <= s_mask_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_126 <= s_screen_val_q0;
        reg_130 <= s_mask_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_146 <= grp_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_151 <= grp_fu_140_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_mask_val_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_mask_val_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_mask_val_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_mask_val_address0 = 64'd0;
    end else begin
        s_mask_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        s_mask_val_ce0 = 1'b1;
    end else begin
        s_mask_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        s_screen_val_address0 = s_screen_val_addr_3_reg_186;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_screen_val_address0 = s_screen_val_addr_2_reg_176;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_screen_val_address0 = s_screen_val_addr_1_reg_166;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_screen_val_address0 = s_screen_val_addr_reg_156;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_screen_val_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_screen_val_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_screen_val_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        s_screen_val_address0 = 64'd0;
    end else begin
        s_screen_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        s_screen_val_ce0 = 1'b1;
    end else begin
        s_screen_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        s_screen_val_d0 = reg_151;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        s_screen_val_d0 = reg_146;
    end else begin
        s_screen_val_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        s_screen_val_we0 = 1'b1;
    end else begin
        s_screen_val_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign s_screen_val_addr_1_reg_166 = 64'd1;

assign s_screen_val_addr_2_reg_176 = 64'd2;

assign s_screen_val_addr_3_reg_186 = 64'd3;

assign s_screen_val_addr_reg_156 = 64'd0;

endmodule //HWAccel
