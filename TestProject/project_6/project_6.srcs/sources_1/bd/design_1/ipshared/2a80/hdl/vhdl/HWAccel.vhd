-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity HWAccel is
generic (
    C_S_AXI_AXI_L_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXI_L_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXI_L_AWVALID : IN STD_LOGIC;
    s_axi_AXI_L_AWREADY : OUT STD_LOGIC;
    s_axi_AXI_L_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_L_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_L_WVALID : IN STD_LOGIC;
    s_axi_AXI_L_WREADY : OUT STD_LOGIC;
    s_axi_AXI_L_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_L_DATA_WIDTH-1 downto 0);
    s_axi_AXI_L_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_L_DATA_WIDTH/8-1 downto 0);
    s_axi_AXI_L_ARVALID : IN STD_LOGIC;
    s_axi_AXI_L_ARREADY : OUT STD_LOGIC;
    s_axi_AXI_L_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_L_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_L_RVALID : OUT STD_LOGIC;
    s_axi_AXI_L_RREADY : IN STD_LOGIC;
    s_axi_AXI_L_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_L_DATA_WIDTH-1 downto 0);
    s_axi_AXI_L_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXI_L_BVALID : OUT STD_LOGIC;
    s_axi_AXI_L_BREADY : IN STD_LOGIC;
    s_axi_AXI_L_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of HWAccel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "HWAccel,hls_ip_2018_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=8,HLS_SYN_FF=726,HLS_SYN_LUT=410}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal s_screen_val_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_screen_val_ce0 : STD_LOGIC;
    signal s_screen_val_we0 : STD_LOGIC;
    signal s_screen_val_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_screen_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_mask_val_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_mask_val_ce0 : STD_LOGIC;
    signal s_mask_val_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal s_screen_val_addr_reg_156 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_screen_val_addr_1_reg_166 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_screen_val_addr_2_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_screen_val_addr_3_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component HWAccel_mul_32s_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component HWAccel_AXI_L_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        s_screen_val_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        s_screen_val_ce0 : IN STD_LOGIC;
        s_screen_val_we0 : IN STD_LOGIC;
        s_screen_val_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_screen_val_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_mask_val_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        s_mask_val_ce0 : IN STD_LOGIC;
        s_mask_val_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    HWAccel_AXI_L_s_axi_U : component HWAccel_AXI_L_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_L_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_L_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXI_L_AWVALID,
        AWREADY => s_axi_AXI_L_AWREADY,
        AWADDR => s_axi_AXI_L_AWADDR,
        WVALID => s_axi_AXI_L_WVALID,
        WREADY => s_axi_AXI_L_WREADY,
        WDATA => s_axi_AXI_L_WDATA,
        WSTRB => s_axi_AXI_L_WSTRB,
        ARVALID => s_axi_AXI_L_ARVALID,
        ARREADY => s_axi_AXI_L_ARREADY,
        ARADDR => s_axi_AXI_L_ARADDR,
        RVALID => s_axi_AXI_L_RVALID,
        RREADY => s_axi_AXI_L_RREADY,
        RDATA => s_axi_AXI_L_RDATA,
        RRESP => s_axi_AXI_L_RRESP,
        BVALID => s_axi_AXI_L_BVALID,
        BREADY => s_axi_AXI_L_BREADY,
        BRESP => s_axi_AXI_L_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        s_screen_val_address0 => s_screen_val_address0,
        s_screen_val_ce0 => s_screen_val_ce0,
        s_screen_val_we0 => s_screen_val_we0,
        s_screen_val_d0 => s_screen_val_d0,
        s_screen_val_q0 => s_screen_val_q0,
        s_mask_val_address0 => s_mask_val_address0,
        s_mask_val_ce0 => s_mask_val_ce0,
        s_mask_val_q0 => s_mask_val_q0);

    HWAccel_mul_32s_3bkb_U1 : component HWAccel_mul_32s_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_118,
        din1 => reg_122,
        ce => ap_const_logic_1,
        dout => grp_fu_134_p2);

    HWAccel_mul_32s_3bkb_U2 : component HWAccel_mul_32s_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_126,
        din1 => reg_130,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_118 <= s_screen_val_q0;
                reg_122 <= s_mask_val_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_126 <= s_screen_val_q0;
                reg_130 <= s_mask_val_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6))) then
                reg_146 <= grp_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_151 <= grp_fu_140_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    s_mask_val_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_mask_val_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_mask_val_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_mask_val_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            s_mask_val_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            s_mask_val_address0 <= "XX";
        end if; 
    end process;


    s_mask_val_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            s_mask_val_ce0 <= ap_const_logic_1;
        else 
            s_mask_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    s_screen_val_addr_1_reg_166 <= ap_const_lv64_1(2 - 1 downto 0);
    s_screen_val_addr_2_reg_176 <= ap_const_lv64_2(2 - 1 downto 0);
    s_screen_val_addr_3_reg_186 <= ap_const_lv64_3(2 - 1 downto 0);
    s_screen_val_addr_reg_156 <= ap_const_lv64_0(2 - 1 downto 0);

    s_screen_val_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, s_screen_val_addr_reg_156, s_screen_val_addr_1_reg_166, s_screen_val_addr_2_reg_176, s_screen_val_addr_3_reg_186, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_screen_val_address0 <= s_screen_val_addr_3_reg_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_screen_val_address0 <= s_screen_val_addr_2_reg_176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_screen_val_address0 <= s_screen_val_addr_1_reg_166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_screen_val_address0 <= s_screen_val_addr_reg_156;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_screen_val_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_screen_val_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_screen_val_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            s_screen_val_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            s_screen_val_address0 <= "XX";
        end if; 
    end process;


    s_screen_val_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            s_screen_val_ce0 <= ap_const_logic_1;
        else 
            s_screen_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_screen_val_d0_assign_proc : process(ap_CS_fsm_state5, reg_146, ap_CS_fsm_state6, reg_151, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            s_screen_val_d0 <= reg_151;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            s_screen_val_d0 <= reg_146;
        else 
            s_screen_val_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_screen_val_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            s_screen_val_we0 <= ap_const_logic_1;
        else 
            s_screen_val_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
