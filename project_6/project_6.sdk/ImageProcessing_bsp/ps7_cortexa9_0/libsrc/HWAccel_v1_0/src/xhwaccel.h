// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XHWACCEL_H
#define XHWACCEL_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xhwaccel_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axi_l_BaseAddress;
} XHwaccel_Config;
#endif

typedef struct {
    u32 Axi_l_BaseAddress;
    u32 IsReady;
} XHwaccel;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XHwaccel_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XHwaccel_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XHwaccel_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XHwaccel_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XHwaccel_Initialize(XHwaccel *InstancePtr, u16 DeviceId);
XHwaccel_Config* XHwaccel_LookupConfig(u16 DeviceId);
int XHwaccel_CfgInitialize(XHwaccel *InstancePtr, XHwaccel_Config *ConfigPtr);
#else
int XHwaccel_Initialize(XHwaccel *InstancePtr, const char* InstanceName);
int XHwaccel_Release(XHwaccel *InstancePtr);
#endif

void XHwaccel_Start(XHwaccel *InstancePtr);
u32 XHwaccel_IsDone(XHwaccel *InstancePtr);
u32 XHwaccel_IsIdle(XHwaccel *InstancePtr);
u32 XHwaccel_IsReady(XHwaccel *InstancePtr);
void XHwaccel_EnableAutoRestart(XHwaccel *InstancePtr);
void XHwaccel_DisableAutoRestart(XHwaccel *InstancePtr);

u32 XHwaccel_Get_s_screen_val_BaseAddress(XHwaccel *InstancePtr);
u32 XHwaccel_Get_s_screen_val_HighAddress(XHwaccel *InstancePtr);
u32 XHwaccel_Get_s_screen_val_TotalBytes(XHwaccel *InstancePtr);
u32 XHwaccel_Get_s_screen_val_BitWidth(XHwaccel *InstancePtr);
u32 XHwaccel_Get_s_screen_val_Depth(XHwaccel *InstancePtr);
u32 XHwaccel_Write_s_screen_val_Words(XHwaccel *InstancePtr, int offset, int *data, int length);
u32 XHwaccel_Read_s_screen_val_Words(XHwaccel *InstancePtr, int offset, int *data, int length);
u32 XHwaccel_Write_s_screen_val_Bytes(XHwaccel *InstancePtr, int offset, char *data, int length);
u32 XHwaccel_Read_s_screen_val_Bytes(XHwaccel *InstancePtr, int offset, char *data, int length);
u32 XHwaccel_Get_s_mask_val_BaseAddress(XHwaccel *InstancePtr);
u32 XHwaccel_Get_s_mask_val_HighAddress(XHwaccel *InstancePtr);
u32 XHwaccel_Get_s_mask_val_TotalBytes(XHwaccel *InstancePtr);
u32 XHwaccel_Get_s_mask_val_BitWidth(XHwaccel *InstancePtr);
u32 XHwaccel_Get_s_mask_val_Depth(XHwaccel *InstancePtr);
u32 XHwaccel_Write_s_mask_val_Words(XHwaccel *InstancePtr, int offset, int *data, int length);
u32 XHwaccel_Read_s_mask_val_Words(XHwaccel *InstancePtr, int offset, int *data, int length);
u32 XHwaccel_Write_s_mask_val_Bytes(XHwaccel *InstancePtr, int offset, char *data, int length);
u32 XHwaccel_Read_s_mask_val_Bytes(XHwaccel *InstancePtr, int offset, char *data, int length);

void XHwaccel_InterruptGlobalEnable(XHwaccel *InstancePtr);
void XHwaccel_InterruptGlobalDisable(XHwaccel *InstancePtr);
void XHwaccel_InterruptEnable(XHwaccel *InstancePtr, u32 Mask);
void XHwaccel_InterruptDisable(XHwaccel *InstancePtr, u32 Mask);
void XHwaccel_InterruptClear(XHwaccel *InstancePtr, u32 Mask);
u32 XHwaccel_InterruptGetEnabled(XHwaccel *InstancePtr);
u32 XHwaccel_InterruptGetStatus(XHwaccel *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
